{
  "name": "filequeue",
  "description": "Drop-in Replacement for fs to prevent too many open files",
  "version": "0.1.2",
  "author": {
    "name": "Trey Griffith",
    "email": "trey.griffith@gmail.com"
  },
  "keywords": [
    "fs",
    "filesystem",
    "queue",
    "emfile"
  ],
  "dependencies": {},
  "devDependencies": {
    "rewire": "1.1.1",
    "mocha": "1.7.4"
  },
  "main": "./index.js",
  "engines": {
    "node": "0.8.x"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/treygriffith/filequeue.git"
  },
  "homepage": "https://github.com/treygriffith/filequeue",
  "readme": "Filequeue\n==============\n### Drop-in Replacement for `fs` that avoids `Error: EMFILE, too many open files`.\n\n`Filequeue` was born out of my encounter with `Error: EMFILE, too many open files`, which occurs when you try to open too many files at once on your system. Due to Node's asynchronous nature, if you perform a lot of `fs.readFile` or similar operations in quick succession, you can easily hit your system's `maxfiles` limit, usually set to 256 on a dev box.\n\n`Filequeue` creates a replacement for `fs`, that I use as `fq` with many of the same operations. However, it keeps track of how many files are open at once, and queues them if there are too many.\n\nInstallation\n-------------\n\nThrough [NPM](http://www.npmjs.org)\n``` bash\n$ npm install filequeue\n```\n\n or using Git\n``` bash\n$ git clone git://github.com/treygriffith/filequeue.git node_modules/filequeue/\n```\n\nHow to Use\n-----------\n\n#### Instantiate Filequeue with a maximim number of files to be opened at once (default is 200)\n\n``` javascript\n  var FileQueue = require('filequeue');\n  var fq = new FileQueue(100);\n\n  // additional instances will attempt to use the same instance (and therefore the same maxfiles) unless the `newQueue` is explicitly passed.\n\n  var FileQueue2 = require('filequeue');\n  var fq2 = new FileQueue(100);\n\n  console.log(fq === fq2); // => true\n```\n\n#### Use any of the following supported `fs` methods\n* [readFile](http://nodejs.org/api/fs.html#fs_fs_readfile_filename_encoding_callback)\n* [writeFile](http://nodejs.org/api/fs.html#fs_fs_writefile_filename_data_encoding_callback)\n* [readdir](http://nodejs.org/api/fs.html#fs_fs_readdir_path_callback)\n* [mkdir](http://nodejs.org/api/fs.html#fs_fs_mkdir_path_mode_callback)\n* [stat](http://nodejs.org/api/fs.html#fs_fs_stat_path_callback)\n* [exists](http://nodejs.org/api/fs.html#fs_fs_exists_path_callback)\n\n``` javascript\n  for(var i=0; i<1000; i++) {\n    fq.readFile('/somefile.txt', function(err, somefile) {\n      console.log(\"data from somefile.txt without crashing!\", somefile);\n    });\n  }\n```\n\nOther Methods\n-------------\nAdd a new `fs` method is simple, just add it to the `methods.js` file with the name and the arguments.\n\nPull requests to add other fs methods with tests exercising them are welcome - the methods included are those I use most often, so I built in support for them.",
  "readmeFilename": "README.md",
  "_id": "filequeue@0.1.2",
  "_from": "filequeue@0.1.x"
}
